name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-0 libnotify-dev libnss3 libxss1 libxtst6 xdg-utils libatspi2.0-0 libdrm2 libgbm1 libxcb-dri3-0 libxkbcommon0 libgtk-3-0
          
      - name: Install dependencies
        run: pnpm install --shamefully-hoist
        
      - name: Import macOS certificates
        if: matrix.os == 'macos-latest' && env.CSC_LINK
        run: |
          # Create temporary keychain
          security create-keychain -p actions temp.keychain
          security default-keychain -s temp.keychain
          security unlock-keychain -p actions temp.keychain
          # Import certificate
          echo "${{ secrets.MAC_CERTS }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k temp.keychain -P "${{ secrets.MAC_CERTS_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k actions temp.keychain
          # Clean up
          rm certificate.p12
        env:
          CSC_LINK: ${{ secrets.MAC_CERTS }}
        
      - name: Build app
        run: pnpm run build
        
      - name: Package app
        timeout-minutes: 45
        run: pnpm run make
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # macOS signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          # Windows signing
          WINDOWS_CODESIGN_FILE: ${{ secrets.WINDOWS_CODESIGN_FILE }}
          WINDOWS_CODESIGN_PASSWORD: ${{ secrets.WINDOWS_CODESIGN_PASSWORD }}
          NODE_OPTIONS: --max-old-space-size=4096
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            out/make/**/*.dmg
            out/make/**/*.exe
            out/make/**/*.deb
            out/make/**/*.rpm
            out/make/**/*.zip
            out/make/**/*.Setup.exe
            out/make/**/*.nupkg
            
  create-release:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          
      - name: List artifacts
        run: |
          echo "Downloaded artifacts:"
          find . -type f -name "*.dmg" -o -name "*.exe" -o -name "*.deb" -o -name "*.zip" | head -20
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            **/*.dmg
            **/*.exe
            **/*.deb
            **/*.zip
            **/*Setup*.exe
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}